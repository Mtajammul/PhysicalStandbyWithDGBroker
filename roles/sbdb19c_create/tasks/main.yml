- name: Create_standbyDB | create required directories on standby database server
  when: inventory_hostname in groups['ora-x2']
  file:
    path="{{ item }}"
    state=directory
    owner="{{ oracle_user }}"
    group="{{ oracle_install_group }}"
    mode=0775
  with_items:
    - "{{ stage_dir }}"
    - "{{ log_dir }}"
    - "{{ db_createfile_path }}/{{ oracle_sbsid }}"
    - "{{ db_recofile_dest }}//{{ oracle_sbsid }}"
  tags:
   - db19c_crsbdirs

- name: Create_standbyDB | create required directories on Primary database server
  when: inventory_hostname in groups['ora-x1']
  file:
    path="{{ item }}"
    state=directory
    owner="{{ oracle_user }}"
    group="{{ oracle_install_group }}"
    mode=0775
  with_items:
    - "{{ stage_dir }}"
    - "{{ log_dir }}"
    - "{{ db_createfile_path }}/{{ oracle_prsid }}"
    - "{{ db_recofile_dest }}//{{ oracle_prsid }}"
  tags:
   - db19c_crprdirs

- name: Create_standbyDB | Copy required script to Primary database server
  when: inventory_hostname in groups['ora-x1']
  copy:
    src=roles/sbdb19c_create/files/{{ item }}
    dest={{ stage_dir }}
    owner="{{ oracle_user }}"
    group="{{ oracle_install_group }}"
    mode=0775
    remote_src=no
  with_items:
    - gensbredologs.sql
    - postcrpr.sql
    - dg_status.sql
    - tns_upd.sh
    - add_staticlsnr.sh
  tags:
   - db19c_sbcpredo

- name: Create_standbyDB | Copy database SQL script to standby database server
  when: inventory_hostname in groups['ora-x2']
  copy:
    src=roles/sbdb19c_create/files/{{ item }}
    dest={{ stage_dir }}
    owner="{{ oracle_user }}"
    group="{{ oracle_install_group }}"
    mode=0755
    remote_src=no
  with_items:
    - postcrsb.sql
    - tns_upd.sh
    - dg_status.sql
    - add_staticlsnr.sh
  tags:
   - db19c_sbcpsql

- name: Create_standbyDB | template for postsql on standby database
  when: inventory_hostname in groups['ora-x2']
  remote_user: "{{ root_user }}"
  template: src=roles/sbdb19c_create/templates/postcrsb.sh.j2 dest={{ stage_dir }}/postcrsb.sql owner="{{ oracle_user }}" group="{{ oracle_install_group }}" force=yes mode=0775
  tags:
   - db19c_sbtmpsql

- name: Create_standbyDB | template for postsql on primary database
  when: inventory_hostname in groups['ora-x1']
  remote_user: "{{ root_user }}"
  template: src=roles/sbdb19c_create/templates/postcrpr.sh.j2 dest="{{ stage_dir }}/postcrpr.sql" owner="{{ oracle_user }}" group="{{ oracle_install_group }}" force=yes mode=0775
  tags:
   - db19c_sbtmpsql

- name: Create_standbyDB | template for physical standby using dbca
  when: inventory_hostname in groups['ora-x2']
  remote_user: "{{ root_user }}"
  template: src=roles/sbdb19c_create/templates/sbdbcreate.sh.j2 dest={{ stage_dir }}/sbdbcreate.sh owner="{{ oracle_user }}" group="{{ oracle_install_group }}" mode=0775
  tags:
   - db19c_sbdbcarsp

- name: Create_standbyDB | create silent listener config file on SB Host
  when: inventory_hostname in groups['ora-x2']
  remote_user: "{{ root_user }}"
  become: yes
  become_user: "{{ oracle_user }}"
  template:
    src=roles/sbdb19c_create/templates/listener.rsp.19c.j2
    dest={{ stage_dir }}/silent-lsnr19c-config.rsp
    remote_src=no
    owner="{{ oracle_user }}"
    group="{{ oracle_install_group }}"
    mode=0775
  register: lsnr_cfgsb
  tags:
    - dbcreate_lsnrcfg

- name: Create_standbyDB | Configuring listener on SB Host
  when: inventory_hostname in groups['ora-x2']
  remote_user: "{{ root_user }}"
  become: yes
  become_user: "{{ oracle_user }}"
  action: shell export ORACLE_HOME={{ oracle_home }}; $ORACLE_HOME/bin/netca -silent -responseFile {{ silent_listener_config_file }}
  ignore_errors: True
  tags:
    - dbcreate_execlsnrcfg

- name: Create_standbyDB | execute tns update for primary database
  when: inventory_hostname in groups['dbservers']
  remote_user: "{{ root_user }}"
  become: yes
  become_user: "{{ oracle_user }}"
  shell: '{{ stage_dir }}/tns_upd.sh {{ oracle_prsid }} {{ prihost }} {{ portnum }} {{ prdbunq_name }} {{ tns_path }}'
  args:
    executable: /bin/bash

- name: Create_standbyDB | execute tns update for standby database
  when: inventory_hostname in groups['dbservers']
  remote_user: "{{ root_user }}"
  become: yes
  become_user: "{{ oracle_user }}"
  shell: '{{ stage_dir }}/tns_upd.sh {{ oracle_sbsid }} {{ sbhost }} {{ portnum }} {{ sbdbunq_name }} {{ tns_path }}'
  args:
    executable: /bin/bash

- name: Create_standbyDB | add static listener 
  when: inventory_hostname in groups['ora-x1']
  remote_user: "{{ root_user }}"
  become: yes
  become_user: "{{ oracle_user }}"
  shell: '{{ stage_dir }}/add_staticlsnr.sh {{ oracle_prsid }}_DGMGRL {{ oracle_prsid }} {{ lsnr_name }} {{ tns_path }}'
  args:
    executable: /bin/bash

- name: Create_standbyDB | add static listener 
  when: inventory_hostname in groups['ora-x2']
  remote_user: "{{ root_user }}"
  become: yes
  become_user: "{{ oracle_user }}"
  shell: '{{ stage_dir }}/add_staticlsnr.sh {{ oracle_sbsid }}_DGMGRL {{ oracle_sbsid }} {{ lsnr_name }} {{ tns_path }}'
  args:
    executable: /bin/bash

- name: Create_standbyDB | reload listener on primary host
  when: inventory_hostname in groups['dbservers']
  remote_user: "{{ root_user }}"
  action: shell export ORACLE_HOME={{ oracle_home }}; $ORACLE_HOME/bin/lsnrctl reload {{ lsnr_name }}
  ignore_errors: True
  tags:
    - dbcreate_execlsnrcfg

- name: Create_standbyDB | Setup force logging Parameter
  when: inventory_hostname in groups['ora-x1']
  remote_user: "{{ root_user }}"
  become: yes
  become_user: "{{ oracle_user }}"
  shell: export ORACLE_HOME={{ oracle_home }}; export ORACLE_SID={{ oracle_prsid }}; echo "{{ item }};" | {{ oracle_home }}/bin/sqlplus / as sysdba
  register: sqlplus_force logging_result
  with_items:
    - alter database force logging
  tags:
   - db19c_prflog

- name: Create_standbyDB | Ensure archiving is set to Fast Recovery Area on the primary
  when: inventory_hostname in groups['ora-x1']
  remote_user: "{{ root_user }}"
  become: yes
  become_user: "{{ oracle_user }}"
  shell: export ORACLE_HOME={{ oracle_home }}; export ORACLE_SID={{ oracle_prsid }}; echo "{{ item }};" | {{ oracle_home }}/bin/sqlplus / as sysdba
  with_items:
    - alter system set log_archive_dest_1='location={{ db_recofile_path }} valid_for=(ALL_LOGFILES,ALL_ROLES) db_unique_name={{ prdbunq_name }}'
  tags:
   - db19c_prarchiving

- name: Create_standbyDB | execute standby redologs script
  when: inventory_hostname in groups['ora-x1']
  remote_user: "{{ root_user }}"
  become: yes
  become_user: "{{ oracle_user }}"
  shell: export ORACLE_HOME={{ oracle_home }}; export ORACLE_SID={{ oracle_prsid }}; export PATH=$PATH:$ORACLE_HOME/bin; echo "@{{ stage_dir }}/gensbredologs.sql;" | {{ oracle_home }}/bin/sqlplus / as sysdba

- name: Create_standbyDB | Create a Physical Standby Database
  when: inventory_hostname in groups['ora-x2']
  remote_user: "{{ root_user }}"
  become: yes
  become_user: "{{ oracle_user }}"
  shell: "{{ stage_dir }}/sbdbcreate.sh"
  tags:
   - db19c_sbcrepsb

- name: Create_standbyDB | execute postsql from the standby database
  when: inventory_hostname in groups['ora-x2']
  remote_user: "{{ root_user }}"
  become: yes
  become_user: "{{ oracle_user }}"
  shell: export ORACLE_HOME={{ oracle_home }}; export ORACLE_SID={{ oracle_sbsid }}; export PATH=$PATH:$ORACLE_HOME/bin; echo "@{{ stage_dir }}/postcrsb.sql;" | {{ oracle_home }}/bin/sqlplus / as sysdba
  tags:
   - db19c_sbexepsql

- name: Create_standbyDB | execute broker Setup from the Primary Database
  when: inventory_hostname in groups['ora-x1']
  remote_user: "{{ root_user }}"
  become: yes
  become_user: "{{ oracle_user }}"
  shell: export ORACLE_HOME={{ oracle_home }}; export ORACLE_SID={{ oracle_prsid }}; export PATH=$PATH:$ORACLE_HOME/bin; echo "@{{ stage_dir }}/postcrpr.sql;" | {{ oracle_home }}/bin/sqlplus / as sysdba
  tags:
   - db19c_prexepsql

- name: Create_standbyDB | Get Primary Database Information
  remote_user: "{{ root_user }}"
  become: yes
  become_user: oracle
  when: inventory_hostname in groups['ora-x1']
  shell: export ORACLE_HOME={{ oracle_home }}; export ORACLE_SID={{ oracle_prsid }}; export PATH=$PATH:$ORACLE_HOME/bin; echo "{{ item }};" | {{ oracle_home }}/bin/sqlplus / as sysdba
  register: prisqloutput
  with_items:
   - SELECT DATABASE_ROLE, OPEN_MODE, DATAGUARD_BROKER FROM v\$database

- name: Create_standbyDB | Get Standby Database Information
  remote_user: "{{ root_user }}"
  become: yes
  become_user: oracle
  when: inventory_hostname in groups['ora-x2']
  shell: export ORACLE_HOME={{ oracle_home }}; export ORACLE_SID={{ oracle_sbsid }}; export PATH=$PATH:$ORACLE_HOME/bin; echo "{{ item }};" | {{ oracle_home }}/bin/sqlplus / as sysdba
  register: sbsqloutput
  with_items:
   - SELECT DATABASE_ROLE, OPEN_MODE, DATAGUARD_BROKER FROM v\$database

- name: Primary Database Status
  debug: msg="{{ item }}"
  with_items: "{{ prisqloutput.results|map(attribute='stdout')|list }}"

- name: Standby Database Status
  debug: msg="{{ item }}"
  with_items: "{{ sbsqloutput.results|map(attribute='stdout')|list }}"

- name: Create_standbyDB | Get DG Broker configuration
  become: yes
  become_user: oracle
  when: inventory_hostname in groups['ora-x1']
  shell: "{{ oracle_home }}/bin/dgmgrl / 'show configuration' "
  environment:
    ORACLE_HOME: "{{ oracle_home }}"
    ORACLE_SID: "{{ prdbunq_name }}"
  args:
    chdir: "{{ oracle_home }}/bin"
  register: dgmgrl_conf

- debug:
    msg: "{{ dgmgrl_conf }}"

- name: display post install message
  when: inventory_hostname in groups['ora-x1']
  debug:
    msg:
      - 'This Steps completed below task for Single Instance at {{ansible_date_time.iso8601}}:'
      - '- Create a Physical Standby Database on server ora-x2'
      - '- END OF ALL: git repository PhysicalStandbyWithDGBroker will be shared'

